root /var/www/; # Comments are allowed
autoindex on; # Only on and off are valid values (case ignored)
client_max_body_size 2M; # Megabytes; no suffix means bytes; 0 means no limit
error_page 404 /404.html;
index index.html index.htm; # Default files for directories

server {
    listen 8000; # Use a different port to avoid conflicts with default NGINX
    server_name localhost; # Listen for requests to localhost

    root /var/www/webserv_test; # Set the root for this server
    index index.html index.htm; # Default files for directories

    # Custom error page
    error_page 404 /404.html;
    location /404.html {
        root /var/www/webserv_test/error;
    }

    # Location for root path
    location / {
        # Limit methods: Only GET and POST allowed
        limit_except GET POST;
        # Our limit_except is different from NGINX
        # It only takes names of HTTP methods to block for this location
        # We do not need to give { deny all; } as the last argument
        
    }

    # Location to test directory listing
    location /files/ {
        autoindex on; # Enable directory listing
        # You might want to limit methods here too
    }

    # Location for redirection
    location /old-path {
        return 301 /subdir/another.html; # Permanent redirect to another file
    }

    # Location for client body size test (e.g., for file uploads)
    location /upload_test {
        client_max_body_size 100K; # Limit to 100KB for this specific path
        upload_store /uploads_dir/;
    }

    # Location for testing 403 Forbidden (no access)
    location /forbidden/ {
        return 403; # Explicitly return 403
    }
}

# More servers
server {
    listen localhost;
    server_name example.com;
    root /var/www/example;
}

server {
    listen 8082;
    server_name test.com;
    root /var/www/test;
}

server {
    listen 8083;
    server_name something.com;
    root /var/www/api;
}

server {
    listen 127.0.0.1:8000;
    server_name hello.com world.com;
    root /var/www/hello_world;
    location / {
        limit_except GET;
    }
}
